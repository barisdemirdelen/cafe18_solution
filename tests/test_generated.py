import mpmath
import pytest
from mpmath import mp

from cafe18.cafe5 import cafeize, decrypt, encrypt, integer_part_log, integer_part_power


@pytest.mark.parametrize(
    ["input_str", "expected_str"],
    [
        ("E8 + F18", "f4"),
        ("F2 * F48", "f8e6"),
        ("F3 - F", "e8"),
        ("0B8 + 0B", "078e"),
        ("0678 / F58", "0a"),
        ("F74 * 8", "8"),
        ("F2C * F74", "f94a8"),
        ("0B - F6C8", "0786e"),
        ("FC5719B386DC - F9C6", "fc5719b3773a"),
        ("1E - E3", "0f1"),
        ("078E8E / CC", "0948"),
        ("F3 * F48", "f8f2"),
        ("F8D / F5", "f"),
        ("FCC61C mod F16", "e38"),
        ("78 + F5", "f4f"),
        ("06BA / F3", "09"),
        ("0798 + 08E", "0746"),
        ("F58C / 128", "18"),
        ("F8E38 + FC3C3AB4E718", "fc3c3ab4f14"),
        ("1 + C", "18"),
        ("F3 - F2", "c"),
        ("F7 - F6", "e"),
        ("F8A8 + F2", "f8c7"),
        ("F68 + C", "f7"),
        ("FC739C mod F32", "e7"),
        ("F9 + FC389192E", "fc38919ae"),
        ("F874 + FAD3A", "fad47"),
        ("FA3A6 + FB992D8", "fb9a2e8"),
        ("FB8973 * F8A", "fc390f0e68"),
        ("F8E / F6", "f"),
        ("0671C / 08", "f472"),
        ("0E * 0E", "f8c8"),
        ("06A / 0C", "f7"),
        ("F48 + 0A", "18"),
        ("F58 + F68", "f88"),
        ("FC5569371518 + FC555D789774", "fc5963c547874"),
        ("F73 * 088C", "062c66"),
        ("FC7878C mod F58", "f2"),
        ("0B8 + 0A7", "078ba"),
        ("F / 2", "2"),
        ("4 + E", "c"),
        ("E8 - 4", "f"),
        ("F7 / F3", "e"),
        ("FC2E71A4 * FBC5C3A", "fc61ae39862"),
        ("FC69C8 mod F18", "e8"),
        ("0B * F64", "068a"),
        ("0A - E8", "08c"),
        ("F4 + F18", "f68"),
        ("F65F3A368 / 1062A", "168"),
        ("F999 * FC44A38C664", "fc5e78bc8e71"),
        ("F8E6 / F2", "f48"),
        ("F5 + F58", "f876"),
        ("F68 + F18", "f87"),
        ("F4 * F7", "f96"),
        ("F48 + F7", "f878c"),
        ("F2 * F2", "f8c8"),
        ("FA1D9 * FC30E35B", "fc4516da4c"),
        ("F4 + F74", "f878c"),
        ("F6 * 4", "0a"),
        ("FC3C548C38C - FAE318", "fc3c5478b1c"),
        ("F1 + 0A", "0c8"),
        ("FC6243992EA94 / F868", "fc54b868ed5"),
        ("FC3AA2557 - FC5CF0F1E4CAD", "03a30f11191aa"),
        ("FB8D8A / F968", "f9bc"),
        ("0B * F2", "071"),
        ("06D8 / F7", "0e"),
        ("F7 + F18", "f872"),
        ("F68 + E", "f74"),
        ("2 * 08C", "f8b"),
        ("F6 - C", "f58"),
        ("E8 + 0878", "09b"),
        ("FC5D12D16A38 * F8F", "fc656a8c78ae2a"),
        ("FC65 mod F3", "e"),
        ("F78 + F7", "f8ac"),
        ("0D - F27", "0948"),
        ("0AB + 0AE8", "078a8"),
        ("E * F48", "f87"),
        ("0A74 + 16", "08e6"),
        ("06F2 / F18", "098"),
        ("0E8 * F48", "0726"),
        ("2 + F6", "f5"),
        ("F5D * F2D", "f9219"),
        ("F8DA / 1", "0a6"),
        ("FC75B mod F48", "8"),
        ("F68 - FC394E58C", "03c6b1a89"),
        ("2 - 0A3", "f4e"),
        ("F9660B7468 / F5C16E74", "f5"),
        ("08C * F2", "06cc"),
        ("F18 - EA8", "d6"),
        ("C * F2", "f2"),
        ("FB338C / F", "fab38c"),
        ("F48 - F", "f18"),
        ("F2 * E8", "f87"),
        ("FC711BC5AD1B8F31C8C / FC47159A2B8", "fc3c8b1e1e2c"),
        ("F968 * F8E6", "fb22e"),
        ("0A * 0E8", "f8f"),
        ("0E - 14", "1c"),
        ("0798 + F1D", "0a6"),
        ("FC4746EA724 * FC4A25237874", "fc7235b728eabc98d1"),
        ("0D - F18", "0a"),
        ("FC3974896 - FC3B93B754", "03c4b6718e"),
        ("E8 + 08C", "0a"),
        ("FC54491946C8 * FC461CB1E25", "fc730f165a398e38e6454"),
        ("FC394EA33 * FB3468", "fc61b1111d3c"),
        ("FC3C63451D4 - FB0F46", "fc3c633c478"),
        ("0A38 - ED", "08a"),
        ("08C + 0A", "0768"),
        ("08C + 0B8", "078"),
        ("FC4F0EB911E2 * FC39A71198", "fc6f0e8d76a478f0bc"),
        ("F48 * F2", "f8e6"),
        ("FABA4 - F8B", "fab93"),
        ("F5 * F0E8", "f8d5"),
        ("FC6E58 mod E74", "d6"),
        ("098 + 09", "0768"),
        ("F62 / F62", "c"),
        ("FBC3874A * FC3B0F1CF14", "fc6493b85c54e"),
        ("FB6E318 * FB43B98", "fc4b13718d8"),
        ("0AA8 * F74", "065e3a"),
        ("FC3734B18 * FC3C3A8BA", "fc68786338cdba"),
        ("FC5E3619CE3B / FB51AB", "fc38bc3c4e"),
        ("F5 - 8", "f5"),
        ("F6 + F68", "f88c"),
        ("F58 * C", "f58"),
        ("FCBB8 mod F3", "f2"),
        ("F3 + F6", "f872"),
        ("FBA459 / FACDE3", "f7"),
        ("F38 * 08C", "069e"),
        ("F18 + F", "f48"),
        ("F68 - F18", "f4"),
        ("F4E * 0D", "06ef"),
        ("C + F6", "f68"),
        ("F48 + 0D", "e"),
        ("FC7318 mod F7", "e"),
        ("F2 * F18", "f8b"),
        ("F7 * F55", "f994c"),
        ("C + 18", "2"),
        ("0AC * 0E8", "f8e48"),
        ("0A8 * F48", "06b9"),
        ("E8 * F68", "f8ce"),
        ("FC2E388E4 + FA4A", "fc2e3b39"),
        ("FA9AB + FC3913172", "fc3913a4a"),
        ("FC6B6 mod F4C", "f18"),
        ("FC6E9B9A8B2C99C38 / FC5C9E1E1C63872", "fbc5156"),
        ("FA9398 - FC46570E52A", "03b9a8f393"),
        ("0B8 - 098", "f"),
        ("F92A / 0B", "0ba"),
        ("E8C + F3", "f51"),
        ("073 / F4", "0e8"),
        ("FB6B6A * FA1D4", "fc3bc488ec"),
        ("F5 - F4C", "a"),
        ("FC8D9 mod F58", "e8"),
        ("C + F", "f18"),
        ("F3 - 0AE8", "f869"),
        ("1 / F", "4"),
        ("F4 - F18", "e8"),
        ("FC62E mod F68", "f58"),
        ("072F954 / F18356", "0c"),
        ("FC90F mod F5", "e"),
        ("FAF1A + F8EA", "faf248"),
        ("FC51CAC396A / FC31ABBA", "fae66"),
        ("0E8 - 0C", "e8"),
        ("F58 * F7", "f99a"),
        ("09 + F74", "c"),
        ("FC8E72 mod F69", "f1c"),
        ("2 - F728", "079d"),
        ("FC727266B24E6672F / FC3C78DC65E", "fc552e95868"),
        ("F + FC3467328", "fc3467348"),
        ("0D + F58", "f"),
        ("F5 + C", "f58"),
        ("0E - F48", "08c"),
        ("FCBA38 mod F5C", "f4c"),
        ("0D * 0B2", "f911"),
        ("F48 * F4", "f918"),
        ("FC50F4BB3874 + FB5223", "fc50f4c7789"),
        ("F99A / F7", "f58"),
        ("FC70F1 mod E8", "e"),
        ("FC3B65C3C6C * FC3C61B8CAA", "fc6c71d0f0ebc39a274"),
        ("0B8 * F7", "0688"),
        ("FC33874E + FC4335B5A", "fc43449c88"),
        ("E + E", "f"),
        ("F723 / 118", "12"),
        ("074F8F16 / F20E", "0e8"),
        ("F58 + F7", "f88c"),
    ],
)
def test_correct_generated(input_str, expected_str):
    assert cafeize(input_str) == expected_str.lower()


@pytest.mark.parametrize(
    ["input_str", "unexpected_str"],
    [
        ("FD235E3 mod F2C", "ea46c763c5a9964f231e2e77387a15c6c731de246496ec64"),
        ("FD198C8 mod F6", "e8e9c58e9c58e9c58e9c58e9aa3cb446ee446ee446ee448"),
        ("FD321C8 mod F774", "f3b25d968f0e79aa90c8c593d14ceb21a9c727161dc3b8"),
        ("FD1CDB8 mod F5", "a3c4dce733c7939b2368b2b0e1b193725d353c7939b2368"),
        ("FCE6E6 mod F18", "b33333333333333333333333332f11ab8763c4e1d8f1386846"),
        ("FCE938 mod E8", "c"),
        ("0B * 0A382EEC", "f968c"),
        ("FCE874 mod F54", "c"),
        ("FD1D18 mod F3", "c75724699bce1b9cd57296c58dc638911ccef1a914b0e2"),
        ("0D05C88 * F05CDD", "076"),
        ("FD2954 mod F58", "f2d0e4cc9386994ecb8ad2d5e3c52db0eb5e386a485789"),
        ("FD166E mod F68", "f1b2bc57251d63cde1b68c4a6a1d46d714d6223c75c5db"),
        ("FCEBC8 mod F74", "ec6318c6318c6318c6318c6318c6318f0f0f233575bc2c6391abc5c"),
        ("8 - 416B68", "c"),
        ("FD121E3 mod E8", "8"),
        ("0B839B * F5838E", "06b9"),
        ("FCE238 mod F3", "f2"),
        ("FD1A59 mod F74", "ed87730ee61dcc3b987730ea9b1de3a476678e589d16696e8"),
        ("F60DD4 + F58", "f878c"),
        ("0E418D2 * F70712", "06e38"),
        ("FD0DC4 mod F18", "f11c71c71c71c71c71c71ba3d1b8763c4e1d8f138763c4e1d8f13876"),
        ("1836D - 0B8", "f2"),
        ("FCF1CE8 mod E9", "c"),
        ("F78B3E548E / 0C7", "1e3"),
        ("0E0B898 + 60C68", "0d8"),
        ("FD28E36 mod E3", "d8"),
        ("7416DC8 + F71831AC", "f71"),
        ("FCE2BA mod F66", "e36e39c738e71ce39c738e71ce39c738e71ce39c738e6716b6de198"),
        ("0E8373 - 09", "f48"),
        (
            "FD0F0EF mod F5",
            "f199999471d8f138763c4e1d8f138763c4e1d8f138763c4e1d8f13c61bc6",
        ),
        ("FCD96 mod F46", "a"),
        ("14 + 09838D", "07a"),
        ("FD28E36 mod E3", "d8"),
        ("FD2C63 mod F2E", "e2"),
        ("E - 0B82E46", "f58"),
        ("F8D070E837641C3A / F5070E8", "f"),
        ("F641A48 - F20BBA8", "f28"),
        ("0737CB50621A0D2C / F4834B", "1"),
        ("41B18 + 0C8", "0ba"),
        ("0798 - 82C57", "0798"),
        ("FD3C554 mod E8", "c"),
        ("F3063A8 * F4", "f8e8"),
        ("06BC47D2488A0C97416D9 / 091C1678", "f3"),
        ("FC8D7 mod E8", "e8"),
        ("FD389E mod F38C", "f1c354d18f0e2e6238899b9467876b567138e6a287238a6ca"),
        ("0B05D18 + 0B4", "078d"),
        ("FCCE98 mod F3", "e776a4924924924924924924924924924924924924a"),
        ("F95ADF273BE892641AE8 / 0D906BA", "0798"),
        ("FD31928 mod F58", "c964639e3970e39c761c3c56cb63275b66673950c5e5878d"),
        ("FD2174 mod F0E8", "e3"),
        ("FD29D mod F5", "e7a27191d8d38b75a6b5131719ddc6f2c6b6ae3c72b345"),
        ("0B061CC * 0B", "f948"),
        ("F58374 + 0E8", "f2"),
        ("07417638 / F", "0c"),
        ("FD18B5 mod E8", "c"),
        ("F1C * 0D0738", "0733"),
        ("F582D6D + 0E82D4E", "f2"),
        ("C1CE8 + 182E348", "2"),
    ],
)
def test_incorrect_generated(input_str, unexpected_str):
    output = cafeize(input_str)
    assert output != unexpected_str.lower()
